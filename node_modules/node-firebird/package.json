{
  "name": "node-firebird",
  "version": "0.7.2",
  "description": "Pure JavaScript and Asynchronous Firebird client for Node.js.",
  "keywords": [
    "firebird",
    "database",
    "rdbms",
    "sql"
  ],
  "homepage": "https://github.com/hgourvest/node-firebird",
  "repository": {
    "type": "git",
    "url": "https://github.com/hgourvest/node-firebird"
  },
  "author": {
    "name": "Henri Gourvest",
    "email": "hgourvest@gmail.com"
  },
  "contributors": [
    {
      "name": "Popa Marius Adrian",
      "email": "mapopa@gmail.com"
    },
    {
      "name": "Peter Širka",
      "email": "petersirka@gmail.com"
    }
  ],
  "main": "./lib",
  "licenses": [
    {
      "type": "MPL-2.0",
      "url": "https://raw.githubusercontent.com/hgourvest/node-firebird/master/LICENSE"
    }
  ],
  "dependencies": {
    "long": "^2.2.5"
  },
  "readme": "![Firebird Logo](https://www.totaljs.com/exports/firebird-logo.png)\n\n[![NPM version][npm-version-image]][npm-url] [![NPM downloads][npm-downloads-image]][npm-url] [![Mozilla License][license-image]][license-url]\n[![Build Status](https://travis-ci.org/mariuz/node-firebird.svg?branch=master)](https://travis-ci.org/mariuz/node-firebird)\n\n[![NPM](https://nodei.co/npm/node-firebird.png?downloads=true&downloadRank=true)](https://nodei.co/npm/node-firebird/) [![NPM](https://nodei.co/npm-dl/node-firebird.png?months=6&height=3)](https://nodei.co/npm/node-firebird/)\n# Pure JavaScript Firebird client for Node.js.\n\nPure JavaScript and Asynchronous Firebird client for Node.js. [Firebird forum](https://groups.google.com/forum/#!forum/node-firebird) on Google Groups.\n\n__Firebird database on social networks__\n\n- [Firebird on Google+](https://plus.google.com/111558763769231855886/posts)\n- [Firebird on Twitter](https://twitter.com/firebirdsql/)\n- [Firebird on Facebook](https://www.facebook.com/FirebirdSQL)\n\n__Changelog for version v0.2.x__\n\n- added auto-reconnect\n- added [sequentially selects](https://github.com/hgourvest/node-firebird/wiki/What-is-sequentially-selects)\n- events for connection (attach, detach, row, result, transaction, commit, rollback, error, etc.)\n- performance improvements\n- supports inserting/updating buffers and streams\n- reading blobs (sequentially)\n- pooling\n- `database.detach()` waits for last command\n- better unit-test\n- best of use with [total.js - web application framework for node.js](http://www.totaljs.com)\n\n---\n\n- [Firebird documentation](http://www.firebirdsql.org/en/documentation/)\n- [Firebird limits and data types](http://www.firebirdsql.org/en/firebird-technical-specifications/)\n\n## Installation\n\n```bash\nnpm install node-firebird\n```\n\n## Usage\n\n```js\nvar Firebird = require('node-firebird');\n```\n\n### Methods\n\n- `Firebird.escape(value) -> return {String}` - prevent for SQL Injections\n- `Firebird.attach(options, function(err, db))` attach a database\n- `Firebird.create(options, function(err, db))` create a database\n- `Firebird.attachOrCreate(options, function(err, db))` attach or create database\n- `Firebird.pool(max, options, function(err, db)) -> return {Object}` create a connection pooling\n\n## Connection types\n\n### Connection options\n\n```js\nvar options = {};\n\noptions.host = '127.0.0.1';\noptions.port = 3050;\noptions.database = 'database.fdb';\noptions.user = 'SYSDBA';\noptions.password = 'masterkey';\n```\n\n### Classic\n\n```js\nFirebird.attach(options, function(err, db) {\n\n    if (err)\n        throw err;\n\n    // db = DATABASE\n    db.query('SELECT * FROM TABLE', function(err, result) {\n        // IMPORTANT: close the connection\n        db.detach();\n    });\n\n});\n```\n\n### Pooling\n\n```js\n// 5 = the number is count of opened sockets\nvar pool = Firebird.pool(5, options);\n\n// Get a free pool\npool.get(function(err, db) {\n\n    if (err)\n        throw err;\n\n    // db = DATABASE\n    db.query('SELECT * FROM TABLE', function(err, result) {\n        // IMPORTANT: release the pool connection\n        db.detach();\n    });\n});\n\n// Destroy pool\npool.destroy();\n```\n\n## Database object (db)\n\n### Methods\n\n- `db.query(query, [params], function(err, result))` - classic query, returns Array of Object\n- `db.execute(query, [params], function(err, result))` - classic query, returns Array of Array\n- `db.sequentially(query, [params], function(row, index), function(err))` - sequentially query\n- `db.detach(function(err))` detach a database\n- `db.transaction(isolation, function(err, transaction))` create transaction\n\n### Transaction methods\n\n- `transaction.query(query, [params], function(err, result))` - classic query, returns Array of Object\n- `transaction.execute(query, [params], function(err, result))` - classic query, returns Array of Array\n- `transaction.commit(function(err))` commit current transaction\n- `transaction.rollback(function(err))` rollback current transaction\n\n## Examples\n\n### PARAMETRIZED QUERIES\n\n### Parameters\n\n```js\nFirebird.attach(options, function(err, db) {\n\n    if (err)\n        throw err;\n\n    // db = DATABASE\n    db.query('INSERT INTO USERS (ID, ALIAS, CREATED) VALUES(?, ?, ?) RETURNING ID', [1, 'Pe\\'ter', new Date()] function(err, result) {\n        console.log(result[0].id);\n        db.query('SELECT * FROM USERS WHERE Alias=?', ['Peter'], function(err, result) {\n            console.log(result);\n            db.detach();\n        });\n    });\n});\n```\n\n### BLOB (stream)\n\n```js\nFirebird.attach(options, function(err, db) {\n\n    if (err)\n        throw err;\n\n    // db = DATABASE\n    // INSERT STREAM as BLOB\n    db.query('INSERT INTO USERS (ID, ALIAS, FILE) VALUES(?, ?, ?)', [1, 'Peter', fs.createReadStream('/users/image.jpg')] function(err, result) {\n        // IMPORTANT: close the connection\n        db.detach();\n    });\n});\n```\n\n### BLOB (buffer)\n\n```js\nFirebird.attach(options, function(err, db) {\n\n    if (err)\n        throw err;\n\n    // db = DATABASE\n    // INSERT BUFFER as BLOB\n    db.query('INSERT INTO USERS (ID, ALIAS, FILE) VALUES(?, ?, ?)', [1, 'Peter', fs.readFileSync('/users/image.jpg')] function(err, result) {\n        // IMPORTANT: close the connection\n        db.detach();\n    });\n});\n```\n\n### READING BLOBS (ASYNCHRONOUS)\n\n```js\nFirebird.attach(options, function(err, db) {\n\n    if (err)\n        throw err;\n\n    // db = DATABASE\n    db.query('SELECT ID, ALIAS, USERPICTURE FROM USER', function(err, rows) {\n\n        if (err)\n            throw err;\n\n        // first row\n        rows[0].userpicture(function(err, name, e) {\n\n            if (err)\n                throw err;\n\n            // +v0.2.4\n            // e.pipe(writeStream/Response);\n\n            // e === EventEmitter\n            e.on('data', function(chunk) {\n                // reading data\n            });\n\n            e.on('end', function() {\n                // end reading\n                // IMPORTANT: close the connection\n                db.detach();\n            });\n        });\n\n    });\n});\n```\n\n### STREAMING A BIG DATA\n\n```js\nFirebird.attach(options, function(err, db) {\n\n    if (err)\n        throw err;\n\n    // db = DATABASE\n    db.sequentially('SELECT * FROM BIGTABLE', function(row, index) {\n\n        // EXAMPLE\n        stream.write(JSON.stringify(row));\n\n    }, function(err) {\n        // END\n        // IMPORTANT: close the connection\n        db.detach();\n    });\n});\n```\n\n### TRANSACTIONS\n\n__Transaction types:__\n\n- `Firebird.ISOLATION_READ_UNCOMMITTED`\n- `Firebird.ISOLATION_READ_COMMITED`\n- `Firebird.ISOLATION_REPEATABLE_READ`\n- `Firebird.ISOLATION_SERIALIZABLE`\n- `Firebird.ISOLATION_READ_COMMITED_READ_ONLY`\n\n```js\nFirebird.attach(options, function(err, db) {\n\n    if (err)\n        throw err;\n\n    // db = DATABASE\n    db.transaction(Firebird.ISOLATION_READ_COMMITED, function(err, transaction) {\n        transaction.query('INSERT INTO users VALUE(?,?)', [1, 'Janko'], function(err, result) {\n\n            if (err) {\n                transaction.rollback();\n                return;\n            }\n\n            transaction.commit(function(err) {\n                if (err)\n                    transaction.rollback();\n                else\n                    db.detach();\n            });\n        });\n    });\n});\n```\n\n### EVENTS\n\n```js\nFirebird.attach(options, function(err, db) {\n\n    if (err)\n        throw err;\n\n    db.on('row', function(row, index, isObject) {\n        // index === Number\n        // isObject === is row object or array?\n    });\n\n    db.on('result', function(result) {\n        // result === Array\n    });\n\n    db.on('attach', function() {\n\n    });\n\n    db.on('detach', function(isPoolConnection) {\n        // isPoolConnection == Boolean\n    });\n\n    db.on('reconnect', function() {\n\n    });\n\n    db.on('error', function(err) {\n\n    });\n\n    db.on('transaction', function(isolation) {\n        // isolation === Number\n    });\n\n    db.on('commit', function() {\n\n    });\n\n    db.on('rollback', function() {\n\n    });\n\n    db.detach();\n});\n```\n\n### Escaping query values\n\n```js\nvar sql1 = 'SELECT * FROM TBL_USER WHERE ID>' + Firebird.escape(1);\nvar sql2 = 'SELECT * FROM TBL_USER WHERE NAME=' + Firebird.escape('Pe\\'er');\nvar sql3 = 'SELECT * FROM TBL_USER WHERE CREATED<=' + Firebird.escape(new Date());\nvar sql4 = 'SELECT * FROM TBL_USER WHERE NEWSLETTER=' + Firebird.escape(true);\n\n// or db.escape()\n\nconsole.log(sql1);\nconsole.log(sql2);\nconsole.log(sql3);\nconsole.log(sql4);\n```\n### Service Manager functions \n- backup\n- restore\n- fixproperties\n- serverinfo\n- database validation\n- commit transaction\n- rollback transaction\n- recover transaction\n- database stats\n- users infos\n- user actions (add modify remove)\n- get firebird file log\n- tracing\n\n```js\n// each row : fctname : [params], typeofreturn\nvar fbsvc = {\n    \"backup\" : { [ \"options\"], \"stream\" },\n    \"nbackup\" : { [ \"options\"], \"stream\" },\n    \"restore\" : { [ \"options\"], \"stream\" },\n    \"nrestore\" : { [ \"options\"], \"stream\" },\n    \"setDialect\": { [ \"database\",\"dialect\"], \"stream\" },\n    \"setSweepinterval\": { [ \"database\",\"sweepinterval\"], \"stream\" },\n    \"setCachebuffer\" : { [ \"database\",\"nbpagebuffers\"], \"stream\" },\n    \"BringOnline\" : { [ \"database\"], \"stream\" },\n    \"Shutdown\" : { [ \"database\",\"shutdown\",\"shutdowndelay\",\"shutdownmode\"], \"stream\" },\n    \"setShadow\" : { [ \"database\",\"activateshadow\"], \"stream\" },\n    \"setForcewrite\" : { [ \"database\",\"forcewrite\"], \"stream\" },\n    \"setReservespace\" : { [ \"database\",\"reservespace\"], \"stream\" },\n    \"setReadonlyMode\" : { [ \"database\"], \"stream\" },\n    \"setReadwriteMode\" : { [ \"database\"], \"stream\" },\n    \"validate\" : { [ \"options\"], \"stream\" },\n    \"commit\" : { [ \"database\", \"transactid\"], \"stream\" },\n    \"rollback\" : { [ \"database\", \"transactid\"], \"stream\" },\n    \"recover\" : { [ \"database\", \"transactid\"], \"stream\" },\n    \"getStats\" : { [ \"options\"], \"stream\" },\n    \"getLog\" : { [ \"options\"], \"stream\" },\n    \"getUsers\" : { [ \"username\"], \"object\" },\n    \"addUser\" : { [ \"username\", \"password\", \"options\"], \"stream\" },\n    \"editUser\" : { [ \"username\", \"options\"], \"stream\" },\n    \"removeUser\" : { [ \"username\",\"rolename\"], \"stream\" },\n    \"getFbserverInfos\" : { [ \"options\", \"options\"], \"object\" },\n    \"startTrace\" : { [ \"options\"], \"stream\" },\n    \"suspendTrace\" : { [ \"options\"], \"stream\" },\n    \"resumeTrace\" : { [ \"options\"], \"stream\" },\n    \"stopTrace\" : { [ \"options\"], \"stream\" },\n    \"getTraceList\" : { [ \"options\"], \"stream\" },\n    \"hasActionRunning\" : { [ \"options\"], \"object\"}\n}\n\n```\n\n### Backup Service example\n\n```js\n\nFirebird.attach(options, function(err, svc) { \n    if (err)\n        return;\n    svc.backup(\n        {\n            database:'/DB/MYDB.FDB',\n            files: [\n                    {\n                     filename:'/DB/MYDB.FBK', \n                     sizefile:'0'\n                    }\n                   ]\n        }, \n        function(err, data) {\n            console.log(data);\n        });\n```\n\n### getLog and getFbserverInfos Service examples with use of stream and object return\n```\nfb.attach(_connection, function(err, svc) { \n    if (err)\n        return;\n    // all function that return a stream take two optional parameter\n    // optread => byline or buffer  byline use isc_info_svc_line and buffer use isc_info_svc_to_eof\n    // buffersize => is the buffer for service manager it can't exceed 8ko (i'm not sure)\n\n    svc.getLog({optread:'buffer', buffersize:2048}, function (err, data) {\n            // data is a readablestream that contain the firebird.log file\n            console.log(err);\n            data.on('data', function (data) {\n                console.log(data.toString());\n            });\n            data.on('end', function() {\n                console.log('finish');\n            });\n        });\n\n    // an other exemple to use function that return object\n    svc.getFbserverInfos(\n            {\n            \"dbinfo\" : true,\n            \"fbconfig\" : true,\n            \"svcversion\" : true,\n            \"fbversion\" : true,\n            \"fbimplementation\" : true,\n            \"fbcapatibilities\" : true,\n            \"pathsecuritydb\" : true,\n            \"fbenv\" : true,\n            \"fbenvlock\" : true,\n            \"fbenvmsg\" : true\n        }, {}, function (err, data) {\n            console.log(err);\n            console.log(data);\n        }); \n});\n\n```\n\n### Charset for database connection is always UTF-8\n\nnode-firebird doesn't let you chose the charset connection, it will always use UTF8.\nNode is unicode, no matter if your database is using another charset to store string or blob, Firebird will transliterate automatically.\n\nThis is why you should use **Firebird 2.5** server at least.\n\n### Firebird 3.0 Support\n\nFirebird new wire protocol is not supported yet so\nfor Firebird 3.0 you need to add the following in firebird.conf\n```\nAuthServer = Legacy_Auth\nWireCrypt = Disabled\n```\n## Contributors\n\n- Henri Gourvest, <https://github.com/hgourvest>\n- Popa Marius Adrian, <https://github.com/mariuz>\n- Peter Širka, <https://github.com/petersirka>\n\n[license-image]: http://img.shields.io/badge/license-MOZILLA-blue.svg?style=flat\n[license-url]: LICENSE\n\n[npm-url]: https://npmjs.org/package/node-firebird\n[npm-version-image]: http://img.shields.io/npm/v/node-firebird.svg?style=flat\n[npm-downloads-image]: http://img.shields.io/npm/dm/node-firebird.svg?style=flat\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hgourvest/node-firebird/issues"
  },
  "_id": "node-firebird@0.7.2",
  "_shasum": "9f5a994ab7d57d0512ab0f22c46ac460cbaf8588",
  "_from": "node-firebird@",
  "_resolved": "https://registry.npmjs.org/node-firebird/-/node-firebird-0.7.2.tgz"
}
